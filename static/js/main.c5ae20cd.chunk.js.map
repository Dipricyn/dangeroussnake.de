{"version":3,"sources":["constants.js","terminal/terminal.js","App.js","serviceWorker.js","index.js"],"names":["appName","Terminal","style","display","justifyContent","alignItems","height","color","hideTopBar","allowTabs","startState","backgroundColor","barColor","fontWeight","fontSize","commands","window","open","descriptions","msg","React","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAAaA,EAAQ,iBC0CNC,E,uKApCP,OACI,qBACIC,MAAO,CACHC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,SALhB,SAQI,cAAC,IAAD,CACIC,MAAM,QACNC,YAAY,EACZC,WAAW,EACXC,WAAW,YACXC,gBAAgB,QAChBC,SAAS,QACTV,MAAO,CAAEW,WAAY,OAAQC,SAAU,OACvCC,SAAU,CACN,OAAU,kBAAMC,OAAOC,KDvBxB,6CCuBwC,WACvC,MAAS,2BAASjB,EAAT,kDACT,OAAU,iBDxBd,aC0BAkB,aAAc,CACV,OAAU,8BACV,MAAQ,2BAAR,OAAoClB,GACpC,OAAS,2BAEbmB,IAAK,4DACmCnB,EADnC,wD,GA7BFoB,IAAMC,W,MCQdC,MARf,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,O,QCKQC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,cAAC,IAAD,CAAQC,SAAUC,GAAlB,SAA0C,cAAC,EAAD,MAAkBC,SAASC,eAAe,SD0H9F,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c5ae20cd.chunk.js","sourcesContent":["export const appName=\"DangerousSnake\";\r\nexport const githubURL=\"https://github.com/Dipricyn/DangerousSnake\";\r\nexport const author=\"Dipricyn\";","import React from 'react';\r\nimport TerminalInReact from 'terminal-in-react';\r\nimport {appName, author, githubURL} from '../constants'\r\n\r\nclass Terminal extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    height: \"100vh\"\r\n                }}\r\n            >\r\n                <TerminalInReact\r\n                    color='green'\r\n                    hideTopBar={true}\r\n                    allowTabs={false}\r\n                    startState='maximised'\r\n                    backgroundColor='black'\r\n                    barColor='black'\r\n                    style={{ fontWeight: \"bold\", fontSize: \"1em\" }}\r\n                    commands={{\r\n                        'github': () => window.open(githubURL, '_blank'),\r\n                        'about': () => `${appName} is a simple console game written in Fortran.`,\r\n                        'author': () => author,\r\n                    }}\r\n                    descriptions={{\r\n                        'github': 'opens the github repository',\r\n                        'about': `shows information about ${appName}`,\r\n                        'author': `shows the game's author`\r\n                    }}\r\n                    msg={`Welcome!\\n` +\r\n                    `This is the interactive homepage for ${appName}.\\n` +\r\n                    `Type 'help' to see a list of commands.`}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Terminal;","import React from 'react';\r\nimport Terminal from './terminal/terminal';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Terminal/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}